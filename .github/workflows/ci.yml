name: Publish Docker image
on:
  push:
    branches: master
jobs:
  copy-docker-compose:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Copy Docker Compose to Remote
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USERNAME }}
        password: ${{ secrets.REMOTE_PASSWORD }}
        source: 'docker-compose.prod.yml'
        target: '~/app'
  api-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: ./api/Dockerfile.prod
          push: true
          tags: nicodes/ctcalc-api
  ui-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14.14'
    - name: Install Dependenceis
      working-directory: ./ui
      run: npm i --production
    - name: Build UI
      working-directory: ./ui
      run: npm run build
    - name: Copy Build to Remote
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USERNAME }}
        password: ${{ secrets.REMOTE_PASSWORD }}
        source: 'ui/build/*'
        target: '~/app/build'
        rm: true
  restart-app:
    name: Restart App
    needs: [copy-docker-compose, api-build, ui-build]
    runs-on: ubuntu-latest
    steps:
    - name: Restart App
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USERNAME }}
        password: ${{ secrets.REMOTE_PASSWORD }}
        script: cd ~/app && docker-compose -f docker-compose.prod.yml --env-file .env.prod down -v && docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --build
  slack-notify:
    name: Slack Notify
    needs: restart-app
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notify
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}